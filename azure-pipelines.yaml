variables:
  packageVersion: $(Build.BuildNumber)

resources:
- repo: self
  clean: true

jobs:

# ------- Windows x64 ---------------------------------------------------------
- job: windows_x64
  condition: succeeded()
  pool:
    name: Hosted VS2017
    demands:
    - msbuild
    - visualstudio

  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: PowerShell@2
    displayName: 'Set build number'
    inputs:
      targetType: inline
      workingDirectory: include/mbedtls
      script: |
       $v = @{}
       $path = Join-Path (Get-Location) 'version.h'
       foreach($line in Get-Content -Path $path)
       {
           $m = [regex]::Match($line, '#define[\t\s]+([1-9a-zA-Z_]+)[\t\s]+(.*)')
           if($m.Success)
           {
               $v.Add($m.Groups[1].Value, $m.Groups[2].Value.Trim())
           }
       }
       $version = "$($v['MBEDTLS_VERSION_MAJOR']).$($v['MBEDTLS_VERSION_MINOR']).$($v['MBEDTLS_VERSION_PATCH']).$($Env:BUILD_BUILDID)"
       Write-Host "##vso[build.updatebuildnumber]$version"
       Write-Host "##vso[task.setvariable variable=packageVersion]$version"

  - task: CMake@1
    displayName: 'Cmake x64'
    inputs:
      cmakeArgs: '. -G "Visual Studio 15 2017" -A x64 -DENABLE_TESTING=OFF -DUSE_SHARED_MBEDTLS_LIBRARY=ON'
      workingDirectory: .
      
  - task: VSBuild@1
    displayName: 'Build solution x64'
    inputs:
      solution: 'mbed TLS.sln'
      vsVersion: 15.0
      platform: x64
      configuration: release
      clean: true
      #msbuildArgs: /m

  - task: CmdLine@2
    displayName: 'Run tests x64'
    inputs:
      script: 'programs\test\Release\selftest.exe'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'crypto\library\Release'
      artifactName: win-x64

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'library\Release'
      artifactName: win-x64

# ------- Windows x86 ---------------------------------------------------------
- job: windows_x86
  condition: succeeded()
  pool:
    name: Hosted VS2017
    demands:
    - msbuild
    - visualstudio

  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: CMake@1
    displayName: 'Cmake x86'
    inputs:
      cmakeArgs: '. -G "Visual Studio 15 2017" -A Win32 -DENABLE_TESTING=OFF -DUSE_SHARED_MBEDTLS_LIBRARY=ON'
      workingDirectory: .
      
  - task: VSBuild@1
    displayName: 'Build solution x86'
    inputs:
      solution: 'mbed TLS.sln'
      vsVersion: 15.0
      platform: WIN32
      configuration: release
      clean: true
      #msbuildArgs: /m

  - task: CmdLine@2
    displayName: 'Run tests x86'
    inputs:
      script: 'programs\test\Release\selftest.exe'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'crypto\library\Release'
      artifactName: win-x86

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'library\Release'
      artifactName: win-x86
      
# ------- Linux -------------------------------------------------------------
- job: linux_x64
  condition: succeeded()
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Generate project'
    inputs:
      cmakeArgs: '. -DENABLE_TESTING=ON -DUSE_SHARED_MBEDTLS_LIBRARY=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$(Build.ArtifactStagingDirectory)'
      workingDirectory: .

  - task: Bash@3
    displayName: 'Build'
    inputs:
      targetType: inline
      script: make

  - task: Bash@3
    displayName: 'Test'
    inputs:
      targetType: inline
      script: make test
      
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: linux-x64

# ------- Darwin -------------------------------------------------------------
- job: osx
  condition: succeeded()
  pool:
    name: Hosted macOS High Sierra
  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: CMake@1
    displayName: 'Generate project'
    inputs:
      cmakeArgs: '. -G Xcode -DENABLE_TESTING=ON -DUSE_SHARED_MBEDTLS_LIBRARY=ON -DCMAKE_BUILD_TYPE=Release'
      workingDirectory: .

  - task: CMake@1
    displayName: 'Compile'
    inputs:
      cmakeArgs: '--build . --config Release'
      workingDirectory: .

  - task: Bash@3
    displayName: 'Test'
    inputs:
      targetType: inline
      script: make test
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'crypto/library/Release'
      artifactName: osx

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'library/Release'
      artifactName: osx

# ------- aarch64-linux-gnu --------------------------------------------------
- job: linux_arm64
  condition: succeeded()
  pool:
    name: Hosted Ubuntu 1604

  container: gigi81/azurecross:aarch64-linux-gnu

  steps:
  - template: arm-steps.yml
    parameters:
      #https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json
      rid: linux-arm64
      qemu: qemu-aarch64

# ------- arm-linux-gnueabihf --------------------------------------------------
- job: linux_arm
  condition: succeeded()
  pool:
    name: Hosted Ubuntu 1604

  container: gigi81/azurecross:arm-linux-gnueabihf

  steps:
  - template: arm-steps.yml
    parameters:
      #https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json
      rid: linux-arm
      qemu: 'qemu-arm -cpu cortex-a8'

# ------- arm-linux-gnueabi --------------------------------------------------
- job: linux_armel
  condition: succeeded()
  pool:
    name: Hosted Ubuntu 1604

  container: gigi81/azurecross:arm-linux-gnueabi

  steps:
  - template: arm-steps.yml
    parameters:
      #https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json
      rid: linux-armel
      qemu: 'qemu-arm'

# ------- Package ---------------------------------------------------------
- job: package
  dependsOn:
  - windows_x64
  - windows_x86
  - linux_x64
  - osx
  - linux_arm64
  - linux_arm
  - linux_armel
  condition: succeeded()
  pool:
    name: Hosted
  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      downloadPath: runtimes

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.0.2' 
    
  - task: NuGetCommand@2
    displayName: 'NuGet pack'
    inputs:
      command: pack
      packagesToPack: mbedtls.nuspec
      versioningScheme: byEnvVar
      versionEnvVar: packageVersion
      
  - task: NuGetCommand@2
    displayName: 'NuGet push private feed'
    inputs:
      command: push
      publishVstsFeed: '/mbedtls'

#  - task: NuGetCommand@2
#    displayName: 'NuGet push nuget.org feed'
#    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#    inputs:
#      command: push
#      nuGetFeedType: external
#      publishFeedCredentials: nuget.org